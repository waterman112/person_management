

  <h2>新建人员</h2>

  <!--这个form应该打到create路由-->
  <form action="/users" method="post" id="formid">
    <!--authenticity-->
    <input type="hidden" name="authenticity_token" value="fslfjlsflsjflsljfworuxn" />
    <!--以下是学生的基本信息-->
    <p>
      姓名：<input type="text" name="user[name]" placeholder:"请输入姓名">
    </p>
    <p>
      性别：
      <input type="text" name="user[sex]" placeholder:"请输入姓名">
    </p>
    <p>
      年龄：
      <input type="text" name="user[age]" placeholder:"请输入姓名">
    </p>
    <p>
      身份证：
      <input type="text" name="user[id_card]" placeholder:"请输入姓名">
    </p>
    <p>
      电话：
      <input type="text" name="user[phone]" placeholder:"请输入姓名">
    </p>
    <p>
      邮箱：
      <input type="text" name="user[email]" placeholder:"请输入姓名">
    </p>
    <p>
      借书证：
      <input type="text" name="user[person_number]" placeholder:"请输入姓名">
    </p>
    <p>
      角色：
      <select name="user[role]">
        <option>老师</option>
        <option>学生</option>
      </select>
    </p>
    <p>
      人员状态：
      <%= select_tag "user[state_id]", options_from_collection_for_select(State.where("role = 0"), :id, :state_name) %>
    </p>
    <!--
      以下是学生的年级班级信息，单纯的通过options_from_collecton_for_select不能很好的将periods表中的很多字段显示，
      1我在想，如果我需要用到options_from_collection_for_select方法，那么，我应该将后端传过来的数据
      进行处理，使得在前端的页面，我能够使用options_from_collectio_for_select
      2我还得考虑，数据在前端采集完全后，传给后端的时候，我该怎么办？
      3不用options_from_collectin_for_select标识 届（年份）.

      4如果用到options_from_collection_for_select ，
      其中的逻辑是：我先去创建班级，之后，我到人员新建页面，新创建人员。
    -->
    <%= select_tag "period[period_name]", options_from_collection_for_select(Period.select(:period_name).distinct, :id, :period_name) %>
    届
    <%= select_tag "period[class_id]", options_from_collection_for_select(Period.select(:class_name).distinct, :id, :class_name) %>
    班
    <!--班级state用1代替-->
    <%= select_tag "period[state_id]", options_from_collection_for_select(State.where("role = 1"), :id, :state_name) %>
    <!--这个是提交按钮-->
    <p>
      <input type="submit" value="提交" />
    </p>
  </form>

<script>

  //这里对form进行验证,重要的事情请重视起来，用到插件jquery.validate.js
  //然后，form内部的input框，所有的限制条件，写在rules中。
  $('#formid').validate({
    rules:{
      "user[name]": {
        required: true,
      },
      "user[sex]": {
        required: true,
      },
      "user[age]": {
        required: true,
        digits:true
      },
      "user[id_card]": {
        required: true,
      },
      "user[role]": {
        required: true,
      },
      "user[phone]": {
        required: true,
        digits:true
      },
      "user[email]": {
        required: true,
      },
      "user[person_number]": {
        required: true,
        digits:true
      },
      "user[state_id]": {
        required: true,
        digits:true
      },
      "period[period_name]": {
        required: true,
      },
      "period[class_name]": {
        required: true,
      },
      "period[state_id]": {
        required: true,
      }
    }
  });

  //这是对英文注释的中文翻译
  jQuery.extend(jQuery.validator.messages, {
    required: "输入框不能为空",
    remote: "请修正该字段",
    email: "请输入正确格式的电子邮件",
    url: "请输入合法的网址",
    date: "请输入合法的日期",
    dateISO: "请输入合法的日期 (ISO).",
    number: "请输入合法的数字",
    digits: "只能输入整数",
    creditcard: "请输入合法的信用卡号",
    equalTo: "请再次输入相同的值",
    accept: "请输入拥有合法后缀名的字符串",
    maxlength: jQuery.validator.format("请输入一个 长度最多是 {0} 的数字"),
    minlength: jQuery.validator.format("请输入一个 长度最少是 {0} 的数字"),
    rangelength: jQuery.validator.format("请输入 一个长度介于 {0} 和 {1} 之间的数字"),
    range: jQuery.validator.format("请输入一个介于 {0} 和 {1} 之间的值"),
    max: jQuery.validator.format("请输入一个最大为{0} 的值"),
    min: jQuery.validator.format("请输入一个最小为{0} 的值")
  });
</script>
